# -*- coding: utf-8 -*-
"""2daEntregadelPF_MolinaPosse_PaezGard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1izSOqWq5Y6dzGuZ4y8S0HOLol1eSlXyX

PREDICCIÓN DE ENFERMEDADES CARDÍACAS
**texto en negrita**


Las enfermedades caridíacas afectan a una gran cantidad de población, sin disticción de edad o país.
Se intenta analizar cuales son las causales de dichas enfermedad y lograr tomar medidas de manera preventiva en la sociedad.

Para ello analizaremos en siguiente dataset.
"""

! pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip

import matplotlib as mpl
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import seaborn as sns
import pandas as pd
import numpy as np
sns.set()
import statsmodels.formula.api as sm
import json
import requests
from bs4 import BeautifulSoup
import scipy
import sklearn # Paquete base de ML
from sklearn import tree
from scipy.stats import norm
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler, MaxAbsScaler, RobustScaler, StandardScaler
from sklearn.cluster import AgglomerativeClustering
import scipy.cluster.hierarchy as sch
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier

from google.colab import drive
import os
drive.mount('/content/gdrive/')

path = "/content/gdrive/MyDrive/Salud/"

df_salud = pd.read_csv(path + "Salud.csv", sep=",")
df_salud.sample(7)

"""¿De dónde provino el conjunto de datos y a qué tratamientos se sometió?
**texto en negrita**

Originalmente, el conjunto de datos proviene de los CDC y es una parte importante del Sistema de Vigilancia de Factores de Riesgo del Comportamiento (BRFSS), que realiza encuestas telefónicas anuales para recopilar datos sobre el estado de salud de los residentes de EE. UU. como el CDCdescribe: "Establecido en 1984 con 15 estados, BRFSS ahora recopila datos en los 50 estados, así como en el Distrito de Columbia y tres territorios de EE. UU. el mundo."
"""

df_salud.groupby("GenHealth").mean()

df_salud.columns

"""Se observan las siguientes columnas:

- HeartDisease: Indicador si el paciente tuvo algùn antecedente de problema cardiaco.
- BMI: Índice de masa muscular
- Smoking: ¿Ha fumado al menos 100 cigarrillos en toda su vida? [Nota: 5 paquetes = 100 cigarrillos]
- AlcoholDrinking: Bebedores empedernidos (hombres adultos que beben más de 14 tragos por semana y mujeres adultas que beben más de 7 tragos por semana)
- Stroke: Antecedente de ACV.
- PhysicalHealth: Ahora, pensando en su salud física, que incluye enfermedades y lesiones físicas, ¿durante cuántos días durante los últimos 30 días su salud física no fue buena? (0-30 días)
- MentalHealth: Pensando en su salud mental, ¿durante cuántos días durante los últimos 30 días su salud mental no fue buena? (0-30 días)
- DiffWalking: ¿Tiene serias dificultades para caminar o subir escaleras?
- Sex: Femenino o Masculino
- AgeCategory: División por categoria etaria.
- Race: Raza.
- Diabetic: Si el paciente padece de diabetes.
- PhysicalActivity: Si realiza actividad física.
- GenHealth: Estado de salud general.
- SleepTime: Cantidad de horas de sueño.
- Asthma: si el paciente padece asma.
- KidneyDisease: Si el paciente parece alguna enfermedad renal.
- SkinCancer: Si el paciente parece cáncer de piel.

Se consulta si el dataset tiene datos nulos.
"""

df_salud.info()

"""Se verifican que no hay datos nulos en el dataset.

Según estudio realizados por el Ministerio de Salud de Argentina, algunos antecedentes que se pueden afectar a sufrir insuficiencia cardíaca son: 


- Edad (a mayor edad, mayor riesgo).
- Antecedentes familiares de enfermedad cardiovascular prematura, padres o hermanos afectados antes de los 55 años en el caso de familiares hombres o antes de los 60 años en el caso de mujeres.
- Tabaquismo
- Niveles elevados de colesterol en la sangre
- Presión arterial elevada (Hipertensión Arterial)
- Diabetes
- Sobrepeso y obesidad
- Inactividad física y estilo de vida sedentario
- Estrés crónico

Fuente: https://www.argentina.gob.ar/salud/glosario/enfermedadcardiovascular (Consultada el 18/12/22)

**HIPÓTESIS**

Con el objetivo es determinar cuales son las posibilidades de una persona sufra de un ataque cardiaco y acorde a los artículos de medicina que informan cuales con son las princiapales causales surge las siguientes hipótesis:

- Tener sobrepeso y/o obesidad de manera continua con algùn otro factor, tiene mayor probabilidad de sufrir un evento cardíaco.
- Si una persona tiene diabetes y se encuentra en un rango etario mayor de 50 años, tiene alta probabilidades de sufrir un episodio cardíaco.
- Mantener 2 o más indicadores a evaluar, es indicador de ser una persona propensa a enfermedades cardíacas.

Se analiza algunas de las categorias:
"""

df_salud.groupby("Sex").describe()

df_salud.groupby("HeartDisease").describe()

df_salud.groupby("GenHealth").describe()

"""**VISUALIZACIONES**"""

plt.figure(figsize=(12,8))
sns.barplot(x="HeartDisease", 
            y="BMI", data=df_salud);
plt.xticks()

plt.figure(figsize=(12,8))
sns.boxplot(x="Sex",y="BMI", data=df_salud);
plt.xticks()

"""Según diversos estudios realizado, el BMI(Índice de Masa Corporal) saludable debe ser entre 18.5 y 24.9, superior a 25 indica sobrepeso.
Observando este gráfico, el estado general de salud en todos los casos supera el BMI que se considera saludable.
"""

plt.figure(figsize=(12,8))
sns.barplot(x="Sex",
            y="BMI", data=df_salud);
plt.xticks()

"""El BMI, es similiar para hombre y mujeres




"""

plt.figure(figsize=(15,12))
sns.displot(data=df_salud, x="BMI", y="AgeCategory")

df_salud["Smoking"].value_counts()

fig, axs = plt.subplots(1,2,figsize=(14,7))
df_salud["Smoking"].value_counts().plot( kind='pie', startangle=30, ax=axs[0],autopct='%1.2f%%')
df_salud["HeartDisease"].value_counts().plot( kind='pie', startangle=30, ax=axs[1],autopct='%1.2f%%')

"""Se observa que la mayoría de los pacientes son no fumadores o bien no fumaron más de 100 cigarrillos en su vida.
Como así también se observa que la mayoría no tiene antecedentes de accidentes cardíacos previos.
"""

fig, axs = plt.subplots(1,2,figsize=(20,10))
df_salud["Race"].value_counts().plot( kind='pie', startangle=30, ax=axs[0],autopct='%1.2f%%')
df_salud["GenHealth"].value_counts().plot( kind='pie', startangle=30, ax=axs[1],autopct='%1.2f%%')

plt.figure(figsize=(12,8))
sns.displot(data=df_salud, x="BMI", hue="Race", kind="kde")

"""OBJETIVOS:
**texto en negrita**
Según estudios realizados, idenficar algunos de los sintomas es necesario para actuar de manera ágil y consultar al médico para tomar las medidas que brinda la medicina para el paciente.

¿QUÉ SE DEBE REALIZAR?
**texto en negrita**
Busca ayuda de inmediato si crees que estás teniendo un ataque cardíaco. Adopta las siguientes medidas:

Llama a emergencias. Si crees que estás teniendo un ataque cardíaco, llama inmediatamente al 911 o al número de emergencia local. Si no tienes acceso a servicios médicos de urgencia, pídele a alguien que te lleve al hospital más cercano. Conduce solamente si no queda otra opción.
Toma nitroglicerina si te la recetó el proveedor de atención médica. Tómala según las instrucciones mientras esperas la ayuda de emergencia.
Toma aspirina, si el médico lo recomienda. El consumo de aspirina durante un ataque cardíaco podría reducir el daño cardíaco al evitar que la sangre forme coágulos.

La aspirina puede interactuar con otros medicamentos, así que no la tomes a menos que el proveedor de atención médica o el personal médico de emergencia te lo indiquen. No retrases la llamada al 911 para tomar aspirina. Llama primero al número de emergencias.

**Qué hacer si ves que una persona podría estar teniendo un ataque cardíaco**

Si una persona está inconsciente y piensas que está teniendo un ataque cardíaco, primero llama al 911 o al número local de emergencias. Luego, verifica si la persona está respirando y si tiene pulso. Si la persona no respira o no le encuentras pulso, comienza a realizarle reanimación cardiopulmonar (RCP).

Si no has recibido capacitación para la reanimación cardiopulmonar, realiza la reanimación solamente con las manos. Es decir, presiona el pecho de la persona con firmeza y rapidez (entre 100 y 120 compresiones por minuto).
Si has recibido capacitación para la reanimación cardiopulmonar y te sientes seguro de poder hacerlo, comienza con 30 compresiones en el pecho antes de hacer dos respiraciones de rescate.

Fuente: https://www.mayoclinic.org/es-es/diseases-conditions/heart-attack/symptoms-causes/syc-20373106 (Consulta 18/12)

**ANÁLISIS UNIVARIADO**

se utiliza para análisis de la variable SleepTime.
"""

plt.figure(figsize=(12,8))
sns.boxplot(x = df_salud["SleepTime"], data = df_salud)

"""Con este gráfico podemos observar que exite un valor promedio de 7 u 8 hora, que es lo recomdado para contribuir al estado de la salud.
Sin embargo se corroborar valores atípicos, estos no se eliminarán ya que nos permitirán observar hasta que grado puede afectar a en nuestra salud.

"""

print('media',df_salud['SleepTime'].mean())
print('median',df_salud['SleepTime'].median())
print('mode',df_salud['SleepTime'].mode())

print('varianza',df_salud['SleepTime'].var())
print('desviación estándar',df_salud['SleepTime'].std())
print('IQR',scipy.stats.iqr(df_salud['SleepTime'].dropna()))
print('Coeficiente de variación',df_salud['SleepTime'].std()/df_salud['SleepTime'].mean())

print('Sesgo SleelTime',scipy.stats.skew(df_salud['SleepTime'].dropna()))
print('Kurtosis SleepTime',scipy.stats.kurtosis(df_salud['SleepTime'].dropna())+3)

plt.figure(figsize=(12,8))
sns.histplot(data = df_salud,
             x = 'SleepTime',
             kde = True
             )

df_salud["SleepTime"].value_counts()

df_Horassueño = pd.DataFrame(df_salud["SleepTime"].value_counts().sort_index())
df_Horassueño.rename(columns = {"SleepTime":"Frec_Absoluta"}, inplace=True)
df_Horassueño.head()

plt.figure(figsize=(12,8))
sns.histplot(data = df_Horassueño,
             x = 'Frec_Absoluta',
             kde = True
             )

valores = df_Horassueño["Frec_Absoluta"].values
acumulada = []
valor = 0
for x in valores:
    valor = valor + x
    acumulada.append(valor)
    
df_Horassueño["Frec_Absoluta_Acumulada"] = acumulada
df_Horassueño.head()

df_Horassueño["Frec_Relativa_%"] = 100 * df_Horassueño["Frec_Absoluta"]/len(df_salud.SleepTime)
df_Horassueño.head()
valores2 = df_Horassueño["Frec_Relativa_%"].values
acumulada2 = []
valor2 = 0
for x in valores2:
    valor2 = valor2 + x
    acumulada2.append(valor2)
    
df_Horassueño["Frec_Relativa_%_Acumulada"] = acumulada2
df_Horassueño

"""**ANÁLISIS BIVARIADO**


"""

import numpy as np
import pandas as pd
import pandas_profiling
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import matthews_corrcoef
from scipy.stats import pointbiserialr

df_salud.info()

df_salud2 = df_salud[["AgeCategory", "Sex", "Smoking", "AlcoholDrinking", "HeartDisease","GenHealth", "BMI", "Stroke", "DiffWalking", "PhysicalActivity","Diabetic"]].copy()
df_salud2.head()

df_salud2["AgeCategory"] = df_salud2["AgeCategory"].replace({"18-24": 0, "25-29": 1, "30-34": 2, 
                                               "35-39": 3, "40-44": 4, "45-49": 5, 
                                               "50-54": 6, "55-59": 7, "60-64": 8, 
                                               "65-69": 9, "70-74": 10, "75-79": 11, 
                                               "80 or older": 12})
df_salud2["GenHealth"] = df_salud2["GenHealth"].replace({"Poor": 0, "Fair": 1, "Good": 2, 
                                                      "Very good": 3, "Excellent": 4})
df_salud2["HeartDisease"] = df_salud2["HeartDisease"].replace({"No": 0, "Yes": 1})
df_salud2["Stroke"] = df_salud2["Stroke"].replace({"No": 0, "Yes": 1})
df_salud2["DiffWalking"] = df_salud2["DiffWalking"].replace({"No": 0, "Yes": 1})
df_salud2["PhysicalActivity"] = df_salud2["PhysicalActivity"].replace({"No": 0, "Yes": 1})
df_salud2["Diabetic"] = df_salud2["Diabetic"].replace({"No": 0, "Yes": 1})
df_salud2["Smoking"] = df_salud2["Smoking"].replace({"No": 0, "Yes": 1})
df_salud2["AlcoholDrinking"] = df_salud2["AlcoholDrinking"].replace({"No": 0, "Yes": 1})
df_salud2.head()

type(df_salud)

pandas_profiling.ProfileReport(df_salud)

pandas_profiling.ProfileReport(df_salud2)

plt.figure(figsize=(12, 8))

df_salud = df_salud.corr()
sns.heatmap(df_salud, 
            xticklabels = df_salud.columns.values,
            yticklabels = df_salud.columns.values,
            annot = True);

plt.rcParams['figure.figsize'] = (12, 9)
sns.boxplot(df_salud['SleepTime'], df_salud['PhysicalHealth'], palette = 'viridis')
plt.title('Relación entre SleepTime y PhysicalHealth', fontsize = 20)
plt.show()

plt.rcParams['figure.figsize'] = (12, 9)
sns.boxplot(df_salud['BMI'], df_salud['SleepTime'], palette = 'viridis')
plt.title('Relación entre BMI y SleepTime', fontsize = 20)
plt.show()

sns.scatterplot(x="AgeCategory", y="GenHealth", data=df_salud2)
plt.title('Relacion entre AgeCategory and GenHealth', fontsize = 20, fontweight = 30)

plt.figure(figsize = (15,5))
sns.regplot(data = df_salud2.query('GenHealth > 0'),
                x = 'BMI',
                y = 'GenHealth'
                )

plt.figure(figsize=(12,10))
ax = sns.countplot(data = df_salud2, x = df_salud2["Smoking"][df_salud2["HeartDisease"] == 1])
ax.set(title='Pacientes con enfermedades cardiacas y fumadores')
plt.xticks(size = 15)
plt.xlabel("Fumadores", size = 15)
plt.yticks(size = 12)
plt.ylabel("Cantidad", size = 15)

plt.figure(figsize=(12,10))
ax = sns.countplot(data = df_salud2, x = df_salud2["AlcoholDrinking"][df_salud2["HeartDisease"] == 1])
ax.set(title='Pacientes con enfermedades cardiacas y bebedores')
plt.xticks(size = 15)
plt.xlabel("Bebedores", size = 15)
plt.yticks(size = 12)
plt.ylabel("Cantidad", size = 15)

plt.figure(figsize=(12,10))
ax = sns.countplot(data = df_salud2, x = df_salud2["Stroke"][df_salud2["HeartDisease"] == 1])
ax.set(title='Pacientes con enfermedades cardiacas y pacientes con antecedentes con ACV')
plt.xticks(size = 15)
plt.xlabel("Antecedentes de ACV", size = 15)
plt.yticks(size = 12)
plt.ylabel("Cantidad", size = 15)

plt.figure(figsize=(12,10))
ax = sns.countplot(data = df_salud2, x = df_salud2["PhysicalActivity"][df_salud2["HeartDisease"] == 1])
ax.set(title='Pacientes con enfermedades cardiacas y realizan actividad física')
plt.xticks(size = 15)
plt.xlabel("Actividad física", size = 15)
plt.yticks(size = 12)
plt.ylabel("Cantidad", size = 15)

df_salud2.columns

plt.figure(figsize=(18,6))
ax=sns.histplot(data = df_salud2, x = df_salud2["AgeCategory"][df_salud2["HeartDisease"] == 1])
ax.set(title='Edad y Enfermedades cardiacas')
plt.xticks(size = 15)
plt.xlabel("Categorias de Edad", size = 15)
plt.yticks(size = 12)
plt.ylabel("Cantidad", size = 15)

plt.figure(figsize=(18,6))
ax=sns.countplot(data = df_salud2, x = df_salud2["AgeCategory"][df_salud2["HeartDisease"] == 0], order = df_salud2['AgeCategory'].value_counts().index.sort_values())
ax.set(title='Edad y Enfermedades cardiacas')
plt.xticks(size = 15)
plt.xlabel("Categorias de Edad", size = 15)
plt.yticks(size = 12)
plt.ylabel("Cantidad", size = 15)

plt.figure(figsize=(12,10))
ax = sns.histplot(data = df_salud2, x = df_salud2["BMI"][df_salud2["HeartDisease"] == 1], color = "red")
ax.set(title='Pacientes con enfermedades cardiacas y Masa muscular')
plt.xticks(size = 15)
plt.xlabel("BMI", size = 15)
plt.yticks(size = 12)
plt.ylabel("Cantidad", size = 15)

plt.figure(figsize=(12,10))
ax = sns.histplot(data = df_salud2, x = df_salud2["BMI"][df_salud2["HeartDisease"] == 0], color= "green")
ax.set(title='Pacientes sin enfermedades cardiacas y Masa muscular')
plt.xticks(size = 15)
plt.xlabel("BMI", size = 15)
plt.yticks(size = 12)
plt.ylabel("Cantidad", size = 15)

plt.figure(figsize=(12,10))
ax = sns.histplot(data = df_salud2, x = df_salud2["Sex"][df_salud2["HeartDisease"] == 1])
ax.set(title='Pacientes con enfermedades cardiacas y Sexo')
plt.xticks(size = 15)
plt.xlabel("Sexo", size = 15)
plt.yticks(size = 12)
plt.ylabel("Cantidad", size = 15)

"""**Análisis Multivariado**"""

df_salud2_pca

sns.pairplot(df_salud2,hue = 'HeartDisease' , size = 7 , palette = 'Set2')

sns.pairplot(df_salud2,hue = 'Sex' , size = 3 , palette = 'Set2')

#Correlaciones
plt.figure(dpi = 120,figsize= (5,4))
mask = np.triu(np.ones_like(df_salud2.corr(),dtype = bool))
sns.heatmap(df_salud2.corr(),mask = mask, fmt = ".2f",annot=True,lw=1,cmap = 'plasma')
plt.yticks(rotation = 0)
plt.xticks(rotation = 90)
plt.title('Correlation Heatmap')
plt.show()